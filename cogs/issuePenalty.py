import disnake
from disnake.ext import commands
import datetime
import json
import os

import sqlite3

connection = sqlite3.connect('Punishments.db')
cursor = connection.cursor()

cursor.execute('''
CREATE TABLE IF NOT EXISTS Punishments (
id INTEGER,
reason TEXT,
perpetrator INTEGER,
hours INTEGER,
proof TEXT
)
''')

connection.commit()

config_path = os.path.join(os.path.dirname(__file__), '..', 'config.json')

with open(config_path) as config:
    config = json.load(config)

channel = config['channels']['issuePenalty']
highstaff = config['roles']['HighStaff']


class Dropdown(disnake.ui.StringSelect):
    def __init__(self):
        options = [
            disnake.SelectOption(
                label="–ó–∞–º–µ—á–∞–Ω–∏–µ 1/3", description="–¢—Ä–∏ –∑–∞–º–µ—á–∞–Ω–∏—è –ø—Ä–∏—Ä–∞–≤–Ω–∏–≤–∞—é—Ç—Å—è –∫ –æ–¥–Ω–æ–º—É –≤—ã–≥–æ–≤–æ—Ä—É.", emoji="üü°"
            ),
            disnake.SelectOption(
                label="–ó–∞–º–µ—á–∞–Ω–∏–µ 2/3", description="–¢—Ä–∏ –∑–∞–º–µ—á–∞–Ω–∏—è –ø—Ä–∏—Ä–∞–≤–Ω–∏–≤–∞—é—Ç—Å—è –∫ –æ–¥–Ω–æ–º—É –≤—ã–≥–æ–≤–æ—Ä—É.", emoji="üü°"
            ),
            disnake.SelectOption(
                label="–í—ã–≥–æ–≤–æ—Ä 1/3", description="–¢—Ä–∏ –≤—ã–≥–æ–≤–æ—Ä–∞ –ø—Ä–∏—Ä–∞–≤–Ω–∏–≤–∞—é—Ç—Å—è –∫ –ü–µ—Ä–µ–∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏.", emoji="üü†"
            ),
            disnake.SelectOption(
                label="–í—ã–≥–æ–≤–æ—Ä 2/3", description="–¢—Ä–∏ –≤—ã–≥–æ–≤–æ—Ä–∞ –ø—Ä–∏—Ä–∞–≤–Ω–∏–≤–∞—é—Ç—Å—è –∫ –ü–µ—Ä–µ–∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏.", emoji="üü†"
            ),

            disnake.SelectOption(
                label="–ü–µ—Ä–µ–∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è", description="–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –ª–∏—à–∞–µ—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–∞–∫–∏–µ-–ª–∏–±–æ —É—Å–ª—É–≥–∏", emoji="‚≠ï"
            ),
            disnake.SelectOption(
                label="–£–≤–æ–ª—å–Ω–µ–Ω–∏–µ", description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –º–µ—Ä–∞ –ø—Ä–µ—Å–µ—á–µ–Ω–∏—è –Ω–∞—Ä—É—à–µ–Ω–∏—è/–Ω–∞—Ä—É—à–µ–Ω–∏–π", emoji="üî¥"
            ),

            disnake.SelectOption(
                label="–î–µ–∂—É—Ä—Å—Ç–≤–æ", description="1 —á–∞—Å –∏ –±–æ–ª–µ–µ —Ä–∞–±–æ—Ç—ã –≤ –±–æ–ª—å–Ω–∏—Ü–µ", emoji="üü¢"
            ),

            disnake.SelectOption(
                label="–ü–æ–Ω–∏–∂–µ–Ω–∏–µ", description="", emoji="‚ö™"
            ),

            disnake.SelectOption(
                label="–ü–µ—Ä–µ–≤–æ–¥ –∏–∑ –æ—Ç–¥–µ–ª–µ–Ω–∏—è", description="", emoji="üîµ"
            ),
            disnake.SelectOption(
                label="–ò–∑—ä—è—Ç–∏–µ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏", description="", emoji="üîµ"
            ),
        ]

        super().__init__(
            placeholder="–°—Ç–µ–ø–µ–Ω—å –Ω–∞–∫–∞–∑–∞–Ω–∏—è",
            min_values=1,
            max_values=1,
            options=options,
        )

    async def callback(self, inter: disnake.MessageInteraction):
        emb = disnake.Embed(
                   title="–í–∑—ã—Å–∫–∞–Ω–∏–µ",
                   color = 0x2B2D31,
                   timestamp=datetime.datetime.now()
               )
        cursor.execute('SELECT id, reason, perpetrator, hours, proof FROM Punishments WHERE id == ?', (inter.author.id,))
        results = cursor.fetchall()[0]
        cursor.execute('DELETE FROM Punishments WHERE id = ?', (inter.author.id,))
        emb.add_field(name="–í—ã–¥–∞–ª –≤–∑—ã—Å–∫–∞–Ω–∏–µ: ", value=f"<@{inter.author.id}>", inline=False)
        emb.add_field(name="–ü–æ–ª—É—á–∏–ª –≤–∑—ã—Å–∫–∞–Ω–∏–µ: ", value=f"<@{results[2]}> ", inline=False)
        emb.add_field(name="–°—Ç–µ–ø–µ–Ω—å –Ω–∞–∫–∞–∑–∞–Ω–∏—è: ", value=f"{self.values[0]}", inline=False)
        emb.add_field(name="–ù–∞—Ä—É—à–µ–Ω–∏–µ: ", value=f"> {results[1]}", inline=True)
        emb.add_field(name="–í—Ä–µ–º—è –Ω–∞ –æ—Ç—Ä–∞–±–æ—Ç–∫—É: ", value=f"{results[3]} —á–∞—Å(–æ–≤)", inline=False)
        emb.add_field(name="–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ: ", value=f"{results[4]}", inline=False)
        #user = disnake.utils.get(inter.guild.members, id=int(results[2]))
        #print(user)
        #print(results[2])
        #if self.values[0] == "–í—ã–≥–æ–≤–æ—Ä 1/3":
        #    role = disnake.utils.get(inter.guild.roles, id=config['roles']['punishments']['rebuke 1/3'])
        #    await user.add_roles(role)
        #elif self.values[0] == "–í—ã–≥–æ–≤–æ—Ä 2/3":
        #    role = disnake.utils.get(inter.guild.roles, id=config['roles']['punishments']['rebuke 2/3'])
        #    await user.add_roles(role)
        #elif self.values[0] == "–ü–µ—Ä–µ–∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è":
        #    role = disnake.utils.get(inter.guild.roles, id=config['roles']['punishments']["recertification"])
        #    await user.add_roles(role)
        ChannelObject = disnake.utils.get(inter.guild.channels, id=channel)
        await ChannelObject.send(f"{inter.author.mention} –≤—ã–¥–∞–ª –≤–∑—ã—Å–∫–∞–Ω–∏–µ <@{results[2]}>", embed=emb)
        await inter.send("**üü¢ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–ª–∏ –≤–∑—ã—Å–∫–∞–Ω–∏–µ!\n-# –ï—Å–ª–∏ —Ä–æ–ª—å –≤–∑—ã—Å–∫–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –æ–Ω–∞ –±—ã–ª–∞ –≤—ã–¥–∞–Ω–∞**", ephemeral=True, delete_after=30)


class DropdownView(disnake.ui.View):
    def __init__(self):
        super().__init__()

        self.add_item(Dropdown())


class IssuePenalty(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.slash_command()
    async def –≤—ã–¥–∞—Ç—å_–≤–∑—ã—Å–∫–∞–Ω–∏–µ(self, inter, –Ω–∞—Ä—É—à–∏—Ç–µ–ª—å: disnake.User, –Ω–∞—Ä—É—à–µ–Ω–∏–µ: str, —á–∞—Å—ã_–Ω–∞_–æ—Ç—Ä–∞–±–æ—Ç–∫—É: int, –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ: str):
        channel_id = inter.channel.id
        if channel_id != channel:
            error_emb = disnake.Embed(
                title="–û—à–∏–±–∫–∞",
                description=f"–î–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ <#{channel}>",
                color = 0xDA373C,
                timestamp=datetime.datetime.now()
            )
            await inter.response.send_message(embed=error_emb, ephemeral=True)
        else:
            if disnake.utils.get(inter.guild.roles, id=highstaff) in inter.author.roles:
                cursor.execute('INSERT INTO Punishments (id, reason, perpetrator, hours, proof) VALUES (?, ?, ?, ?, ?)', (inter.author.id, –Ω–∞—Ä—É—à–µ–Ω–∏–µ, –Ω–∞—Ä—É—à–∏—Ç–µ–ª—å.id, —á–∞—Å—ã_–Ω–∞_–æ—Ç—Ä–∞–±–æ—Ç–∫—É, –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ))
                view = DropdownView()
                await inter.response.send_message("**–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–∑—ã—Å–∫–∞–Ω–∏—è**", ephemeral=True, view=view)
            else:
                error_emb = disnake.Embed(
                    title="–û—à–∏–±–∫–∞",
                    description=f"–î–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ä—à–∏–π –∏ —Ä—É–∫–æ–≤–æ–¥—è—â–∏–π —Å–æ—Å—Ç–∞–≤",
                    color = 0xDA373C,
                    timestamp=datetime.datetime.now()
                )
                await inter.response.send_message(embed=error_emb, ephemeral=True)




def setup(bot: commands.Bot):
    bot.add_cog(IssuePenalty(bot))
